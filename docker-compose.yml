version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#    healthcheck:
#      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
    depends_on:
      - zookeeper
    networks:
      - microservices-net
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    env_file: .env
    volumes:
      - mongodb_data:/data/db
#      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    ports:
      - "27017:27017"
    networks:
      - microservices-net
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
    networks:
      - microservices-net
    volumes:
      - postgres_data:/var/lib/postgres/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_DB_USER} -d ${POSTGRES_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5


  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservices-net

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8070:8070"
    env_file: .env
    environment:
      SERVER_PORT: 8070
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: api-gateway
    depends_on:
      - eureka-server
    networks:
      - microservices-net

  seller-portal-service:
    build: ./seller-portal-service
    container_name: seller-portal-service
    ports:
      - "8077:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - api-gateway
      - product-service
      - order-service
    networks:
      - microservices-net

  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    ports:
      - "8079:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - api-gateway
      - order-service
      - product-service
    networks:
      - microservices-net

  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8072:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - api-gateway
      - order-service
    networks:
      - microservices-net

  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - profile-service
      - api-gateway
      - redis
    networks:
      - microservices-net

  profile-service:
    build: ./profile-service
    container_name: profile-service
    ports:
      - "8082:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - api-gateway
      - mongodb
    networks:
      - microservices-net

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8083:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_DB_PASSWORD}
    depends_on:
      - eureka-server
      - kafka
      - notification-service
      - api-gateway
      - postgres
    networks:
      - microservices-net

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8084:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - kafka
      - api-gateway
      - mongodb
    networks:
      - microservices-net

  cart-service:
    build: ./cart-service
    container_name: cart-service
    ports:
      - "8085:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - profile-service
      - api-gateway
      - redis
    networks:
      - microservices-net

  product-service:
    build: ./product-service-2
    container_name: product-service
    ports:
      - "8086:8080"
    env_file: .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - api-gateway
      - notification-service
      - kafka
      - mongodb
    networks:
      - microservices-net


volumes:
  mongodb_data:
  redis_data:
  postgres_data:
networks:
  microservices-net:
    driver: bridge